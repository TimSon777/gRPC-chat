// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "chat.proto" (package "proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Chat } from "./chat";
import type { SendMessageRequest } from "./chat";
import type { ReceiveMessageResponse } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectResponse } from "./chat";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.Chat
 */
export interface IChatClient {
    /**
     * @generated from protobuf rpc: Connect(google.protobuf.Empty) returns (proto.ConnectResponse);
     */
    connect(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConnectResponse>;
    /**
     * @generated from protobuf rpc: ReceiveMessages(google.protobuf.Empty) returns (stream proto.ReceiveMessageResponse);
     */
    receiveMessages(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ReceiveMessageResponse>;
    /**
     * @generated from protobuf rpc: SendMessage(proto.SendMessageRequest) returns (google.protobuf.Empty);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, Empty>;
}
/**
 * @generated from protobuf service proto.Chat
 */
export class ChatClient implements IChatClient, ServiceInfo {
    typeName = Chat.typeName;
    methods = Chat.methods;
    options = Chat.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Connect(google.protobuf.Empty) returns (proto.ConnectResponse);
     */
    connect(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConnectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConnectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReceiveMessages(google.protobuf.Empty) returns (stream proto.ReceiveMessageResponse);
     */
    receiveMessages(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ReceiveMessageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ReceiveMessageResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(proto.SendMessageRequest) returns (google.protobuf.Empty);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
